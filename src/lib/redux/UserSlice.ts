import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';


// Define the initial state
interface UserState {
    
}

const initialState: UserState = {

};

// Define async thunk for fetching an invoice
// export const fetchUserData = createAsyncThunk('user/fetchInvoice', async (invoiceId: string) => {
//     if (!auth.currentUser || !invoiceId) return null;
//     const userDocRef = doc(firestore, 'users', auth.currentUser.uid);
//     const invoicesCollectionRef = collection(userDocRef, 'invoices');
//     const invoiceDocRef = doc(invoicesCollectionRef, invoiceId);

//     const invoiceDocSnapshot = await getDoc(invoiceDocRef);
//     if (invoiceDocSnapshot.exists()) {
//         const invoiceData = invoiceDocSnapshot.data() as Omit<Invoice, 'id'>;
//         return { id: invoiceDocSnapshot.id, ...invoiceData };
//     }
//     return null;
// });

// Define async thunk for fetching user data
export const fetchUserData = createAsyncThunk('user/fetchUserData', async (_, { rejectWithValue }) => {
});

// Define the slice
const userSlice = createSlice({
    name: 'user',
    initialState,
    reducers: {
        
    },
    extraReducers: (builder) => {
        
    },
});

// Export the actions generated by createSlice
export const {  } = userSlice.actions;

// Export the reducer
export default userSlice.reducer;
